#include <bits/stdc++.h>
using namespace std;

struct Edge{
    int src,des;
};

class Graph{
    public:
    vector<vector<int>>adjList;
    Graph(vector<Edge> const & edges,int n)
    {
        
        adjList.resize(n);
        for(auto & edge: edges)               //constructor-class name no  return type
        {
         adjList[edge.src].push_back(edge.des);
         adjList[edge.des].push_back(edge.src);
         
        }
    }
    
};

void BFS (Graph const & graph,int v,vector<bool> & discovered){
    
    queue<int>queue;
    discovered[v]=true;
    queue.push(v);
    while(!queue.empty()){
        v=queue.front();
        queue.pop();
        cout<< v << " ";
        for(int u:graph.adjList[v]){
            if(!discovered[u]){
                discovered[u]=true;
                queue.push(u);
            }
        }
        
        
    }
}

int main()
{
    vector<Edge>edges={{1,2},{1,3},{1,4},{2,5},{2,6},{5,9},{5,10},{4,7},{4,8},{7,11},{7,12}};
    int n=15;
    Graph graph(edges,n);
    vector<bool>discovered(n,false);
    for(int i=1;i<n;i++){
        if(discovered[i]==false){
            BFS(graph,i,discovered);
        }
    }
    return 0;
}
